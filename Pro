@Entity
@Table(name = "admin")
public class Admin {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(name = "username")
  private String username;

  @Column(name = "password")
  private String password;

  // Constructors, getters and setters
}

@Entity
@Table(name = "patients")
public class Patient {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(name = "name")
  private String name;

  @Column(name = "age")
  private int age;

  @Column(name = "gender")
  private String gender;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "doctor_id")
  private Doctor doctor;

  @OneToMany(mappedBy = "patient")
  private List<Appointment> appointments;

  @Column(name = "email")
  private String email;

  @Column(name = "phone_number")
  private String phoneNumber;

  @Column(name = "password")
  private String password;

  // Constructors, getters and setters
}

@Entity
@Table(name = "doctor")
public class Doctor {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(name = "name")
  private String name;

  @Column(name = "specialization")
  private String specialization;

  @OneToMany(mappedBy = "doctor")
  private List<Patient> patients;

  @Column(name = "email")
  private String email;

  @Column(name = "phone_number")
  private String phoneNumber;

  @Column(name = "password")
  private String password;

  // Constructors, getters and setters
}

@Entity
@Table(name = "room")
public class Room {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(name = "room_number")
  private int roomNumber;

  @Column(name = "available")
  private boolean available;

  // Constructors, getters and setters
}
@Entity
@Table(name = "appointment")
public class Appointment {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(name = "date")
  private LocalDate date;

  @Column(name = "start_time")
  private LocalTime startTime;

  @Column(name = "end_time")
  private LocalTime endTime;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "patient_id")
  private Patient patient;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "doctor_id")
  private Doctor doctor;

  // Constructors, getters and setters
}
public interface AdminRepository extends JpaRepository<Admin, Long> {
}

public interface PatientRepository extends JpaRepository<Patient, Long> {
}

public interface DoctorRepository extends JpaRepository<Doctor, Long> {
}

public interface RoomRepository extends JpaRepository<Room, Long> {
}

public interface AppointmentRepository extends JpaRepository<Appointment, Long> {
}

@Service
public class AdminService {

  @Autowired
  private AdminRepository adminRepository;

  public Admin saveAdmin(Admin admin) {
    return adminRepository.save(admin);
  }

  public Admin getAdminById(Long id) {
    return adminRepository.findById(id).orElse(null);
  }

  public Admin getAdminByUsername(String username) {
    return adminRepository.findByUsername(username);
  }

  public void deleteAdmin(Long id) {
    adminRepository.deleteById(id);
  }
}
@Service
public class PatientService {

  @Autowired
  private PatientRepository patientRepository;

  public Patient savePatient(Patient patient) {
    return patientRepository.save(patient);
  }

  public Patient getPatientById(Long id) {
    return patientRepository.findById(id).orElse(null);
  }

  public List<Patient> getAllPatients() {
    return patientRepository.findAll();
  }

  public List<Patient> getPatientsByDoctorId(Long doctorId) {
    return patientRepository.findByDoctorId(doctorId);
  }

  public void deletePatient(Long id) {
    patientRepository.deleteById(id);
  }

  public Patient updatePatientProfileInfo(Patient updatedPatient) {
    Patient patient = patientRepository.findById(updatedPatient.getId()).orElse(null);

    if (patient != null) {
      patient.setName(updatedPatient.getName());
      patient.setAge(updatedPatient.getAge());
      patient.setGender(updatedPatient.getGender());
      patient.setEmail(updatedPatient.getEmail());
      patient.setPhoneNumber(updatedPatient.getPhoneNumber());

      return patientRepository.save(patient);
    } else {
      return null;
    }
  }

  public Patient updatePatientPassword(Long patientId, String newPassword) {
    Patient patient = patientRepository.findById(patientId).orElse(null);

    if (patient != null) {
      patient.setPassword(newPassword);

      return patientRepository.save(patient);
    } else {
      return null;
    }
  }
}
@Service
public class DoctorService {

  @Autowired
  private DoctorRepository doctorRepository;

  public Doctor saveDoctor(Doctor doctor) {
    return doctorRepository.save(doctor);
  }

  public Doctor getDoctorById(Long id) {
    return doctorRepository.findById(id).orElse(null);
  }

  public List<Doctor> getAllDoctors() {
    return doctorRepository.findAll();
  }

  public void deleteDoctor(Long id) {
    doctorRepository.deleteById(id);
  }

  public Doctor updateDoctorProfileInfo(Doctor updatedDoctor) {
    Doctor doctor = doctorRepository.findById(updatedDoctor.getId()).orElse(null);

    if (doctor != null) {
      doctor.setName(updatedDoctor.getName());
      doctor.setSpecialization(updatedDoctor.getSpecialization());
      doctor.setEmail(updatedDoctor.getEmail());
      doctor.setPhoneNumber(updatedDoctor.getPhoneNumber());

      return doctorRepository.save(doctor);
    } else {
      return null;
    }
  }

  public Doctor updateDoctorPassword(Long doctorId, String newPassword) {
    Doctor doctor = doctorRepository.findById(doctorId).orElse(null);

    if (doctor != null) {
      doctor.setPassword(newPassword);

      return doctorRepository.save(doctor);
    } else {
      return null;
    }
  }
}
@Service
public class RoomService {

  @Autowired
  private RoomRepository roomRepository;

  public Room saveRoom(Room room) {
    return roomRepository.save(room);
  }

  public Room getRoomById(Long id) {
    return roomRepository.findById(id).orElse(null);
  }

  public List<Room> getAllRooms() {
    return roomRepository.findAll();
  }

  public void deleteRoom(Long id) {
    roomRepository.deleteById(id);
  }

  public Room updateRoom(Room updatedRoom) {
    Room room = roomRepository.findById(updatedRoom.getId()).orElse(null);

    if (room != null) {
      room.setRoomNumber(updatedRoom.getRoomNumber());
      room.setCapacity(updatedRoom.getCapacity());
      room.setAvailable(updatedRoom.isAvailable());

      return roomRepository.save(room);
    } else {
      return null;
    }
  }

  public List<Room> getAvailableRooms() {
    return roomRepository.findByAvailable(true);
  }
}
bookAppointment.jsp:

<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<html>
<head>
    <title>Book Appointment</title>
</head>
<body>
    <h2>Book an Appointment</h2>
    <form:form method="POST" modelAttribute="appointment">
    
        <form:hidden path="id" />
        <p>
            <label>Patient:</label>
            <form:input path="patientName" />
        </p>
        <p>
            <label>Doctor:</label>
            <form:input path="doctorName" />
        </p>
        <p>
            <label>Date:</label>
            <form:input path="date" />
        </p>
        <p>
            <label>Room:</label>
            <form:select path="roomId" items="${rooms}" itemValue="id" itemLabel="roomNumber" />
        </p>
        <input type="submit" value="Book Appointment" />
    </form:form>
</body>
</html>

deleteAppointment.jsp:

<html>
<head>
    <title>Delete Appointment</title>
</head>
<body>
    <h2>Delete Appointment</h2>
    <form method="POST" action="/deleteAppointment">
        <input type="hidden" name="id" value="${appointment.id}" />
        <p>Are you sure you want to delete the appointment with ${appointment.doctorName} on ${appointment.date}?</p>
        <input type="submit" value="Delete" />
    </form>
</body>
</html>

updateProfile.jsp:

<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<html>
<head>
    <title>Update Profile</title>
</head>
<body>
    <h2>Update Profile</h2>
    <form:form method="POST" modelAttribute="user">
        <form:hidden path="id" />
        <p>
            <label>First Name:</label>
            <form:input path="firstName" />
        </p>
        <p>
            <label>Last Name:</label>
            <form:input path="lastName" />
        </p>
        <p>
            <label>Email:</label>
            <form:input path="email" />
        </p>
        <p>
            <label>Phone Number:</label>
            <form:input path="phoneNumber" />
        </p>
        <input type="submit" value="Save Changes" />
    </form:form>
</body>
</html>

updatePassword.jsp:

<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<html>
<head>
    <title>Update Password</title>
</head>
<body>
    <h2>Update Password</h2>
    <form:form method="POST" modelAttribute="user">
        <form:hidden path="id" />
        <p>
            <label>Current Password:</label>
            <form:password path="currentPassword" />
        </p>
        <p>
            <label>New Password:</label>
            <form:password path="newPassword" />
        </p>
        <p>
            <label>Confirm New Password:</label>
            <form:password path="confirmPassword" />
        </p>
        <input type="submit" value="Save Changes" />
    </form:form>
</body>
</html>

AppointmentController.java:

@Controller
@RequestMapping("/appointments")
public class AppointmentController {

    @Autowired
    private AppointmentService appointmentService;

    // Controller method for displaying the book appointment form
    @GetMapping("/book")
    public String showBookAppointmentForm(Model model) {
        Appointment appointment = new Appointment();
        model.addAttribute("appointment", appointment);
        return "bookAppointment";
    }

    // Controller method for handling the book appointment form submission
    @PostMapping("/book")
    public String bookAppointment(@ModelAttribute("appointment") Appointment appointment, Model model) {
        appointmentService.bookAppointment(appointment);
        model.addAttribute("message", "Appointment booked successfully!");
        return "bookAppointment";
    }

    // Controller method for displaying the delete appointment form
    @GetMapping("/delete")
    public String showDeleteAppointmentForm(Model model) {
        Appointment appointment = new Appointment();
        model.addAttribute("appointment", appointment);
        return "deleteAppointment";
    }

    // Controller method for handling the delete appointment form submission
    @PostMapping("/delete")
    public String deleteAppointment(@ModelAttribute("appointment") Appointment appointment, Model model) {
        appointmentService.deleteAppointment(appointment);
        model.addAttribute("message", "Appointment deleted successfully!");
        return "deleteAppointment";
    }

}

ProfileController.java:

@Controller
@RequestMapping("/profile")
public class ProfileController {

    @Autowired
    private UserService userService;

    // Controller method for displaying the update profile form
    @GetMapping("/update")
    public String showUpdateProfileForm(Model model) {
        User user = new User();
        model.addAttribute("user", user);
        return "updateProfile";
    }

    // Controller method for handling the update profile form submission
    @PostMapping("/update")
    public String updateProfile(@ModelAttribute("user") User user, Model model) {
        userService.updateUser(user);
        model.addAttribute("message", "Profile updated successfully!");
        return "updateProfile";
    }

    // Controller method for displaying the update password form
    @GetMapping("/password")
    public String showUpdatePasswordForm(Model model) {
        User user = new User();
        model.addAttribute("user", user);
        return "updatePassword";
    }

    // Controller method for handling the update password form submission
    @PostMapping("/password")
    public String updatePassword(@ModelAttribute("user") User user, BindingResult result, Model model) {
        if (result.hasErrors()) {
            return "updatePassword";
        }

        String newPassword = user.getNewPassword();
        String confirmPassword = user.getConfirmPassword();

        if (!newPassword.equals(confirmPassword)) {
            model.addAttribute("error", "New password and confirm password must match!");
            return "updatePassword";
        }

        userService.updatePassword(user);
        model.addAttribute("message", "Password updated successfully!");
        return "updatePassword";
    }
}
# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/hospital
spring.datasource.username=root
spring.datasource.password=secret
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

# Logging Configuration
logging.level.org.springframework.web=DEBUG




